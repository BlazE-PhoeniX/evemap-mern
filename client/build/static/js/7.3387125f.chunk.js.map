{"version":3,"sources":["components/resetpassword/Form.js","pages/PasswordReset.js"],"names":["Form","props","tokenRef","useRef","history","useHistory","match","useRouteMatch","useState","formError","setFormError","dispatchRedux","useDispatch","newPassword","useInput","validate","value","trim","length","confirmPassword","password","bind","formSubmitHandler","e","a","preventDefault","touchAll","validateAll","message","resetPassword","token","current","onSubmit","noValidate","className","ref","id","type","params","Input","label","input","placeholder","onChange","onBlur","autoComplete","invalid","inputIsInvalid","errorMsg","PasswordReset"],"mappings":"8LA4FeA,EArFF,SAAAC,GACX,IAAMC,EAAWC,mBACXC,EAAUC,cACVC,EAAQC,cAHM,EAIcC,mBAAS,MAJvB,mBAIbC,EAJa,KAIFC,EAJE,KAKdC,EAAgBC,cAEhBC,EAAcC,YAAS,CAAEC,SAAU,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,QAAU,KACnEC,EAAkBL,YAAS,CAC/BC,SAAW,SAACK,EAAUJ,GAAX,MACC,KAAVA,GAAgBA,IAAUI,EAASJ,OAAOK,KAAK,KAAMR,KAGnDS,EAAiB,uCAAG,WAAMC,GAAN,SAAAC,EAAA,yDACxBD,EAAEE,iBACFf,EAAa,MACbgB,YAASb,EAAaM,GAEjBQ,YAAYd,EAAaM,GALN,uBAMtBT,EAAa,CAAEkB,QAAS,uCANF,0BAUxBjB,EACEkB,YACE,CACEC,MAAO5B,EAAS6B,QAAQf,MACxBH,cACAM,mBAEFf,IAjBoB,2CAAH,sDAsBvB,OACE,uBACE4B,SAAUV,EACVW,YAAU,EACVC,UAAU,2BAHZ,UAIGzB,GAAa,mBAAGyB,UAAU,aAAb,SAA2BzB,EAAUmB,UACnD,uBACEO,IAAKjC,EACLkC,GAAG,QACHC,KAAK,SACLrB,MAAOV,EAAMgC,OAAOR,OAAS,KAE/B,cAACS,EAAA,EAAD,CACEC,MAAM,eACNC,MAAO,CACLP,UAAW,cACXE,GAAI,WACJC,KAAM,WACNK,YAAa,mDACb1B,MAAOH,EAAYG,MACnB2B,SAAU9B,EAAY8B,SACtBC,OAAQ/B,EAAY+B,OACpBC,aAAc,OAEhBC,QAASjC,EAAYkC,eACrBC,SAAS,+CAEX,cAACT,EAAA,EAAD,CACEL,UAAU,WACVM,MAAM,mBACNC,MAAO,CACLP,UAAW,cACXE,GAAI,mBACJC,KAAM,WACNK,YAAa,mDACb1B,MAAOG,EAAgBH,MACvB2B,SAAUxB,EAAgBwB,SAC1BC,OAAQzB,EAAgByB,OACxBC,aAAc,OAEhBC,QAAS3B,EAAgB4B,eACzBC,SAAS,gDAEX,qBAAKd,UAAU,oBAAf,SACE,wBAAQA,UAAU,4BAAlB,kCCzEOe,UAXO,SAAAhD,GACpB,OACE,sBAAMiC,UAAU,OAAhB,SACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,6BAAd,qCACA,cAAC,EAAD","file":"static/js/7.3387125f.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport useInput, { touchAll, validateAll } from \"../../hooks/use-input\";\nimport { resetPassword } from \"../../store/auth\";\nimport Input from \"../ui/Input\";\nimport { useHistory, useRouteMatch } from \"react-router\";\n\nconst Form = props => {\n  const tokenRef = useRef();\n  const history = useHistory();\n  const match = useRouteMatch();\n  const [formError, setFormError] = useState(null);\n  const dispatchRedux = useDispatch();\n\n  const newPassword = useInput({ validate: value => value.trim().length >= 8 });\n  const confirmPassword = useInput({\n    validate: ((password, value) =>\n      value !== \"\" && value === password.value).bind(null, newPassword),\n  });\n\n  const formSubmitHandler = async e => {\n    e.preventDefault();\n    setFormError(null);\n    touchAll(newPassword, confirmPassword);\n\n    if (!validateAll(newPassword, confirmPassword)) {\n      setFormError({ message: \"Provide valid details to continue.\" });\n      return;\n    }\n\n    dispatchRedux(\n      resetPassword(\n        {\n          token: tokenRef.current.value,\n          newPassword,\n          confirmPassword,\n        },\n        history\n      )\n    );\n  };\n\n  return (\n    <form\n      onSubmit={formSubmitHandler}\n      noValidate\n      className=\"form form--pasword-reset\">\n      {formError && <p className=\"form-error\">{formError.message}</p>}\n      <input\n        ref={tokenRef}\n        id=\"token\"\n        type=\"hidden\"\n        value={match.params.token || \"\"}\n      />\n      <Input\n        label=\"New Password\"\n        input={{\n          className: \"form__input\",\n          id: \"password\",\n          type: \"password\",\n          placeholder: \"••••••••\",\n          value: newPassword.value,\n          onChange: newPassword.onChange,\n          onBlur: newPassword.onBlur,\n          autoComplete: \"off\",\n        }}\n        invalid={newPassword.inputIsInvalid}\n        errorMsg=\"Password must be greater than 7 characters\"\n      />\n      <Input\n        className=\"ma-bt-lg\"\n        label=\"Confirm Password\"\n        input={{\n          className: \"form__input\",\n          id: \"password-confirm\",\n          type: \"password\",\n          placeholder: \"••••••••\",\n          value: confirmPassword.value,\n          onChange: confirmPassword.onChange,\n          onBlur: confirmPassword.onBlur,\n          autoComplete: \"off\",\n        }}\n        invalid={confirmPassword.inputIsInvalid}\n        errorMsg=\"Confirm password doesn't match new password\"\n      />\n      <div className=\"form__group right\">\n        <button className=\"btn btn--green btn--small\">Reset password</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import Form from \"../components/resetpassword/Form\";\n\nconst PasswordReset = props => {\n  return (\n    <main className=\"main\">\n      <div className=\"login-form\">\n        <h2 className=\"heading-secondary ma-bt-lg\">Enter your new Password</h2>\n        <Form />\n      </div>\n    </main>\n  );\n};\n\nexport default PasswordReset;\n"],"sourceRoot":""}